library(gridExtra)
library(corrplot)
library(xgboost)
library(lattice)
library(RColorBrewer)
library(psych)
library(DataExplorer)
library(reshape2)
library(VIM)
library(BSDA)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
library(xgboost)
library(lattice)
library(RColorBrewer)
library(psych)
library(DataExplorer)
library(reshape2)
library(VIM)
library(BSDA)
library(readr)
library(DiagrammeR)
df <- read_csv("diabetes.csv")
head(df)
df<- df %>% select('Outcome',
'Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age')
names(df)
cor <- cor(df)
m <- melt(cor)
#target variable is outcome
m<- m[which(m$Var1 == 'Outcome')]
#sort corr in descending order
m<- m[order(- abs(m$value)),]
head(m,15)
View(m)
colnames(df)[colnames(df) == 'Outcome'] <- 'Diabetes'
# recode 0 = Healthy & 1 = Diabetes for visualizations
# note: make sure 0 = No, 1 = Yes
df$Diabetes <- factor(df$Diabetes,
levels = c(0,1),
labels = c("Healthy", "Diabetes"))
str(df)
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = df) +
geom_bar(stat = "count", mapping = aes(x = Diabetes),
color = 'thistle4', fill = c('thistle1','thistle3'), lwd = 2) +
labs(x = "",title = "Diagnosis Diabetes within Study") +
theme_bw(base_size = 20) +
theme(axis.text.x = element_text(size = 18,
colour = 'thistle4', face = "bold"),
axis.text.y = element_text(size = 18))
#glucose distribution Healthy vs Diabetic patient
ggplot(df,aes(Glucose, fill = factor(df$Diabetes))) +
geom_density(lwd = 2, show.legend = FALSE, color = "gold4") +
facet_wrap(. ~ Diabetes) + labs(x = "Glucose Levels",
title = "Plasma Glucose Distributions by Diabetes",
subtitle = "(Average Glucose Level shown as Center Line)") +
scale_fill_manual(values = c('gold', 'gold3')) +
theme_bw() + theme_bw(base_size = 20) + xlim(c(0,225))+
theme(strip.background = element_rect(fill="snow1")) +
theme(axis.text.x = element_text(size = 18)) +
theme(axis.text.y = element_text(size = 18)) +
theme(plot.subtitle=element_text(color = 'gold4', face = "bold")) +
theme(strip.text = element_text(face = "bold", size = 18)) +
geom_vline(xintercept = mean(df$Glucose), lwd = 2, color = "gold4", linetype = 1)
data <- read_csv("diabetes.csv")
head(data)
data<- data %>% select('Outcome','Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age')
head(data)
#features required for prediction
diabetes1<-data %>%
select(Outcome)
#target variable
diabetes2<-data %>%
select(-c(1))
features <- data.matrix(diabetes2)
labels <- data.matrix(diabetes1)
#model building
train_data <- features[1:448,]
train_labels <- labels[1:448]
test_data <- features[(449:561),]
test_labels <- labels[(449:561)]
dtrain <- xgb.DMatrix(data = train_data, label= train_labels)
dtest <- xgb.DMatrix(data = test_data, label= test_labels)
model <- xgboost(data = dtrain,
nround = 2,
objective = "binary:logistic")
pred <- predict(model, dtest)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
xgb.plot.multi.trees(feature_names = names(features),
model = model)
View(df)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
library(xgboost)
library(lattice)
library(RColorBrewer)
library(psych)
library(DataExplorer)
library(reshape2)
library(VIM)
library(BSDA)
library(readr)
library(DiagrammeR)
df <- read_csv("diabetes.csv")
head(df)
df<- df %>% select('Outcome',
'Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age')
View(df)
View(df)
cor <- cor(df)
View(cor)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
library(xgboost)
library(lattice)
library(RColorBrewer)
library(psych)
library(DataExplorer)
library(reshape2)
library(VIM)
library(BSDA)
library(readr)
library(DiagrammeR)
df <- read_csv("diabetes.csv")
head(df)
df<- df %>% select('Outcome',
'Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age')
cor <- cor(df)
#target variable is outcome
m<- m[which(m$Var1 == 'Outcome')]
#sort corr in descending order
m<- m[order(- abs(m$value)),]
head(m,15)
m <- melt(cor)
#target variable is outcome
m<- m[which(m$Var1 == 'Outcome')]
#sort corr in descending order
m<- m[order(- abs(m$value)),]
head(m,15)
View(m)
View(m)
colnames(df)[colnames(df) == 'Outcome'] <- 'Diabetes'
# recode 0 = Healthy & 1 = Diabetes for visualizations
# note: make sure 0 = No, 1 = Yes
df$Diabetes <- factor(df$Diabetes,
levels = c(0,1),
labels = c("Healthy", "Diabetes"))
str(df)
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = df) +
geom_bar(stat = "count", mapping = aes(x = Diabetes),
color = 'thistle4', fill = c('thistle1','thistle3'), lwd = 2) +
labs(x = "",title = "Diagnosis Diabetes within Study") +
theme_bw(base_size = 20) +
theme(axis.text.x = element_text(size = 18,
colour = 'thistle4', face = "bold"),
axis.text.y = element_text(size = 18))
#glucose distribution Healthy vs Diabetic patient
ggplot(df,aes(Glucose, fill = factor(df$Diabetes))) +
geom_density(lwd = 2, show.legend = FALSE, color = "gold4") +
facet_wrap(. ~ Diabetes) + labs(x = "Glucose Levels",
title = "Plasma Glucose Distributions by Diabetes",
subtitle = "(Average Glucose Level shown as Center Line)") +
scale_fill_manual(values = c('gold', 'gold3')) +
theme_bw() + theme_bw(base_size = 20) + xlim(c(0,225))+
theme(strip.background = element_rect(fill="snow1")) +
theme(axis.text.x = element_text(size = 18)) +
theme(axis.text.y = element_text(size = 18)) +
theme(plot.subtitle=element_text(color = 'gold4', face = "bold")) +
theme(strip.text = element_text(face = "bold", size = 18)) +
geom_vline(xintercept = mean(df$Glucose), lwd = 2, color = "gold4", linetype = 1)
View(df)
View(df)
#BMI distribution of healthy and diabetes patients
options(repr.plot.width=15, repr.plot.height=8)
ggplot(df,aes(BMI, fill = factor(df$Diabetes))) +
geom_density(lwd = 2, show.legend = FALSE, color = 'indianred4') +
facet_wrap(. ~ Diabetes) + labs(x = "Body Mass Index",
title = "Body Mass Index by Diabetes", subtitle = "(Average Body Mass Index as Center Line)") +
scale_fill_manual(values = c('indianred1', 'indianred3')) +
theme_bw() + theme_bw(base_size = 20) + xlim(c(-10,75)) +
theme(strip.background = element_rect(fill="snow1")) +
theme(axis.text.x = element_text(size = 20)) +
theme(axis.text.y = element_text(size = 20)) +
theme(strip.text = element_text(face = "bold", size = 18)) +
theme(plot.subtitle=element_text(color = 'indianred4', face = "bold")) +
geom_vline(xintercept = mean(df$BMI), lwd = 2, color = 'indianred4', linetype = 1)
options(repr.plot.width=12, repr.plot.height=8)
ggplot(df,aes(x = Diabetes, y = BMI, fill = Diabetes)) +
geom_violin(lwd = 2, show.legend = FALSE, color = "indianred4") +
labs(x = "", title = "Body Mass Index by Diabetes",
subtitle = "(Average BMI shown as Center Line)") +
scale_fill_manual(values = c('indianred1', 'indianred3')) +
theme_bw() + theme_bw(base_size = 20)  + ylim(0,65) +
theme(axis.text.x = element_text(size = 18, face = "bold", colour ='indianred2')) +
theme(plot.subtitle=element_text(color = 'indianred4', face = "bold")) +
geom_hline(yintercept = mean(df$BMI), lwd = 2, color = "indianred4", linetype = 1)
head(df)
data <- read_csv("diabetes.csv")
head(data)
data<- data %>% select('Outcome','Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age')
head(data)
#features required for prediction
diabetes1<-data %>%
select(Outcome)
diabetes2<-data %>%
select(-c(1))
View(diabetes1)
View(diabetes1)
View(diabetes1)
View(diabetes1)
View(diabetes2)
View(diabetes2)
features <- data.matrix(diabetes2)
labels <- data.matrix(diabetes1)
train_data <- features[1:448,]
train_labels <- labels[1:448]
test_data <- features[(449:561),]
test_labels <- labels[(449:561)]
xgbtrain <- xgb.DMatrix(data = train_data, label= train_labels)
xgbtest <- xgb.DMatrix(data = test_data, label= test_labels)
xgbmodel <- xgboost(data = xgbtrain,
nround = 2,
objective = "binary:logistic")
pred <- predict(model, xgbtest)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
pred <- predict(xgbmodel, xgbtest)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
class_prediction <-
ifelse(probability_prediction > 0.50,
"positive_class",
"negative_class"
)
class_prediction <-
ifelse(pred> 0.50,
"positive_class",
"negative_class"
)
confusionMatrix(pred, test_labels)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
confusionMatrix(pred, test_labels)
library(caret)
confusionMatrix(pred, test_labels)
library(e1071)
svmmodel = svm(formula = Diabetes ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = Diabetes ~ .,
data = training_data,
type = 'C-classification',
kernel = 'linear')
data <- read_csv("diabetes.csv")
head(data)
data<- data %>% select('Outcome','Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age')
head(data)
#features required for prediction
diabetes1<-data %>%
select(Outcome)
#target variable
diabetes2<-data %>%
select(-c(1))
features <- data.matrix(diabetes2)
labels <- data.matrix(diabetes1)
#model building
train_data <- features[1:448,]
train_labels <- labels[1:448]
test_data <- features[(449:561),]
test_labels <- labels[(449:561)]
library(ggplot2)
library(dplyr)
library(gridExtra)
library(corrplot)
library(xgboost)
library(lattice)
library(RColorBrewer)
library(psych)
library(DataExplorer)
library(reshape2)
library(VIM)
library(BSDA)
library(caret)
library(e1071)
library(readr)
library(DiagrammeR)
data <- read_csv("diabetes.csv")
head(data)
data<- data %>% select('Outcome','Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age')
head(data)
#features required for prediction
diabetes1<-data %>%
select(Outcome)
#target variable
diabetes2<-data %>%
select(-c(1))
features <- data.matrix(diabetes2)
labels <- data.matrix(diabetes1)
#model building
train_data <- features[1:448,]
train_labels <- labels[1:448]
test_data <- features[(449:561),]
test_labels <- labels[(449:561)]
svmmodel = svm(formula = Diabetes ~ .,
data = training_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = Diabetes ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
View(data)
View(data)
svmmodel = svm(formula = Outcome ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = y ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(
data = train_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = data ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = Outcome ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
svmmodel = svm(formula = train_labels ~ .,
data = train_data,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(svmmodel, newdata = test_labels
y_pred = predict(svmmodel, newdata = test_labels)
svpred = predict(svmmodel, newdata = test_labels)
svpred = predict(svmmodel,test_labels)
xgb.plot.multi.trees(feature_names = names(features),
model = model)
#Xgb
xgbtrain <- xgb.DMatrix(data = train_data, label= train_labels)
xgbtest <- xgb.DMatrix(data = test_data, label= test_labels)
xgbmodel <- xgboost(data = xgbtrain,
nround = 2,
objective = "binary:logistic")
pred <- predict(xgbmodel, xgbtest)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
xgb.plot.multi.trees(feature_names = names(features),
model = model)
xgb.plot.multi.trees(feature_names = names(features),
model = xgbmodel)
df <- read_csv("diabetes.csv")
head(df)
df<- df %>% select('Outcome',
'Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age')
names(df)
cor <- cor(df)
m <- melt(cor)
#target variable is outcome
m<- m[which(m$Var1 == 'Outcome')]
#sort corr in descending order
m<- m[order(- abs(m$value)),]
head(m,15)
olnames(df)[colnames(df) == 'Outcome'] <- 'Diabetes'
# recode 0 = Healthy & 1 = Diabetes for visualizations
# note: make sure 0 = No, 1 = Yes
df$Diabetes <- factor(df$Diabetes,
levels = c(0,1),
labels = c("Healthy", "Diabetes"))
str(df)
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = df) +
geom_bar(stat = "count", mapping = aes(x = Diabetes),
color = 'thistle4', fill = c('thistle1','thistle3'), lwd = 2) +
labs(x = "",title = "Diagnosis Diabetes within Study") +
theme_bw(base_size = 20) +
theme(axis.text.x = element_text(size = 18,
colour = 'thistle4', face = "bold"),
axis.text.y = element_text(size = 18))
colnames(df)[colnames(df) == 'Outcome'] <- 'Diabetes'
# recode 0 = Healthy & 1 = Diabetes for visualizations
# note: make sure 0 = No, 1 = Yes
df$Diabetes <- factor(df$Diabetes,
levels = c(0,1),
labels = c("Healthy", "Diabetes"))
str(df)
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = df) +
geom_bar(stat = "count", mapping = aes(x = Diabetes),
color = 'thistle4', fill = c('thistle1','thistle3'), lwd = 2) +
labs(x = "",title = "Diagnosis Diabetes within Study") +
theme_bw(base_size = 20) +
theme(axis.text.x = element_text(size = 18,
colour = 'thistle4', face = "bold"),
axis.text.y = element_text(size = 18))
options(repr.plot.width=10, repr.plot.height=8)
ggplot(data = df) +
geom_density(mapping = aes(x = Glucose), lwd = 3,
color = "gold4", fill = 'gold') + labs(x = "Glucose Levels",
title = "Plasma Glucose Concentration Distribution") +
xlim(c(0,225)) + #ylim(c(0, 12000)) +   binwidth = .1
theme_bw(base_size = 20) +
theme(axis.text.x = element_text(size = 13),
axis.text.y = element_text(size = 13))
ggplot(df,aes(Glucose, fill = factor(df$Diabetes))) +
geom_density(lwd = 2, show.legend = FALSE, color = "gold4") +
facet_wrap(. ~ Diabetes) + labs(x = "Glucose Levels",
title = "Plasma Glucose Distributions by Diabetes",
subtitle = "(Average Glucose Level shown as Center Line)") +
scale_fill_manual(values = c('gold', 'gold3')) +
theme_bw() + theme_bw(base_size = 20) + xlim(c(0,225))+
theme(strip.background = element_rect(fill="snow1")) +
theme(axis.text.x = element_text(size = 18)) +
theme(axis.text.y = element_text(size = 18)) +
theme(plot.subtitle=element_text(color = 'gold4', face = "bold")) +
theme(strip.text = element_text(face = "bold", size = 18)) +
geom_vline(xintercept = mean(df$Glucose), lwd = 2, color = "gold4", linetype = 1)
df <- df %>%
select(
Outcome,Glucose,BMI,Age,Pregnancies,DiabetesPedigreeFunction,Insulin)
options(repr.plot.width=12, repr.plot.height=12)
pairs.panels(df, pch="+", cex = .7, stars=TRUE, hist.col="grey", cex.axis = 1.4)
options(repr.plot.width=15, repr.plot.height=8)
ggplot(df,aes(BMI, fill = factor(df$Diabetes))) +
geom_density(lwd = 2, show.legend = FALSE, color = 'indianred4') +
facet_wrap(. ~ Diabetes) + labs(x = "Body Mass Index",
title = "Body Mass Index by Diabetes", subtitle = "(Average Body Mass Index as Center Line)") +
scale_fill_manual(values = c('indianred1', 'indianred3')) +
theme_bw() + theme_bw(base_size = 20) + xlim(c(-10,75)) +
theme(strip.background = element_rect(fill="snow1")) +
theme(axis.text.x = element_text(size = 20)) +
theme(axis.text.y = element_text(size = 20)) +
theme(strip.text = element_text(face = "bold", size = 18)) +
theme(plot.subtitle=element_text(color = 'indianred4', face = "bold")) +
geom_vline(xintercept = mean(df$BMI), lwd = 2, color = 'indianred4', linetype = 1)
options(repr.plot.width=12, repr.plot.height=8)
ggplot(df,aes(x = Diabetes, y = BMI, fill = Diabetes)) +
geom_violin(lwd = 2, show.legend = FALSE, color = "indianred4") +
labs(x = "", title = "Body Mass Index by Diabetes",
subtitle = "(Average BMI shown as Center Line)") +
scale_fill_manual(values = c('indianred1', 'indianred3')) +
theme_bw() + theme_bw(base_size = 20)  + ylim(0,65) +
theme(axis.text.x = element_text(size = 18, face = "bold", colour ='indianred2')) +
theme(plot.subtitle=element_text(color = 'indianred4', face = "bold")) +
geom_hline(yintercept = mean(df$BMI), lwd = 2, color = "indianred4", linetype = 1)
data <- read_csv("diabetes.csv")
head(data)
data<- data %>% select('Outcome','Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age')
head(data)
diabetes1<-data %>%
select(Outcome)
#target variable
diabetes2<-data %>%
select(-c(1))
View(cor)
View(cor)
View(m)
View(m)
features <- data.matrix(diabetes2)
labels <- data.matrix(diabetes1)
train_data <- features[1:448,]
train_labels <- labels[1:448]
test_data <- features[(449:561),]
test_labels <- labels[(449:561)]
xgbtrain <- xgb.DMatrix(data = train_data, label= train_labels)
xgbtest <- xgb.DMatrix(data = test_data, label= test_labels)
xgbmodel <- xgboost(data = xgbtrain,
nround = 2,
objective = "binary:logistic")
pred <- predict(xgbmodel, xgbtest)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
xgb.plot.multi.trees(feature_names = names(features),
model = xgbmodel)
View(data)
View(data)
View(df)
View(df)
View(cor)
View(cor)
table(test_labels,pred>0.5)
table(test_labels,pred>0.3)
table(test_labels,pred>0.35)
clear_selection()
conf_matrix=table(test_labels,pred>0.35)
conf_matrix
conf_matrix=table(test_labels,pred>0.20)
conf_matrix
table(test_labels,pred>0.20)
table(test_labels,pred>0.25)
table(test_labels,pred>0.35)
err <- mean(as.numeric(pred > 0.5) != test_labels)
print(paste("test-error=", err))
table(test_labels,pred>0.35)
